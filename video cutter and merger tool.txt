import os
import argparse
import subprocess
import tkinter as tk
from tkinter import filedialog
from moviepy.editor import VideoFileClip, concatenate_videoclips

def get_video_duration(input_path):
    """Get video duration using FFprobe"""
    cmd = [
        'ffprobe', '-v', 'error',
        '-show_entries', 'format=duration',
        '-of', 'default=noprint_wrappers=1:nokey=1',
        input_path
    ]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return float(result.stdout.decode().strip())

def cut_video(input_path, output_path, start_time, end_time=None, duration=None):
    """Cut video using FFmpeg with time precision"""
    if end_time:
        duration = end_time - start_time
    elif not duration:
        raise ValueError("Either end_time or duration must be specified")

    cmd = [
        'ffmpeg', '-y',
        '-ss', str(start_time),
        '-i', input_path,
        '-t', str(duration),
        '-c', 'copy',
        output_path
    ]
    
    try:
        subprocess.run(cmd, check=True, stderr=subprocess.PIPE)
        return True
    except subprocess.CalledProcessError as e:
        print(f"Cutting failed: {e.stderr.decode()}")
        return False

def merge_videos(input_paths, output_path):
    """Merge multiple videos while maintaining codec compatibility"""
    # Create temporary file list
    list_path = 'file_list.txt'
    with open(list_path, 'w') as f:
        for path in input_paths:
            f.write(f"file '{os.path.abspath(path)}'\n")

    cmd = [
        'ffmpeg', '-y',
        '-f', 'concat',
        '-safe', '0',
        '-i', list_path,
        '-c', 'copy',
        output_path
    ]

    try:
        subprocess.run(cmd, check=True, stderr=subprocess.PIPE)
        return True
    except subprocess.CalledProcessError as e:
        print(f"Merging failed: {e.stderr.decode()}")
        return False
    finally:
        if os.path.exists(list_path):
            os.remove(list_path)

def main_cli():
    parser = argparse.ArgumentParser(description="Video Cutter & Merger")
    subparsers = parser.add_subparsers(dest='command')

    # Cut command
    cut_parser = subparsers.add_parser('cut')
    cut_parser.add_argument('input', help="Input video file")
    cut_parser.add_argument('output', help="Output file path")
    cut_parser.add_argument('--start', type=float, required=True, help="Start time (seconds)")
    cut_group = cut_parser.add_mutually_exclusive_group(required=True)
    cut_group.add_argument('--end', type=float, help="End time (seconds)")
    cut_group.add_argument('--duration', type=float, help="Clip duration (seconds)")

    # Merge command
    merge_parser = subparsers.add_parser('merge')
    merge_parser.add_argument('inputs', nargs='+', help="Input video files")
    merge_parser.add_argument('output', help="Output file path")

    args = parser.parse_args()

    if args.command == 'cut':
        success = cut_video(
            args.input,
            args.output,
            args.start,
            end_time=args.end,
            duration=args.duration
        )
        if success:
            print(f"Cut video saved to: {args.output}")

    elif args.command == 'merge':
        success = merge_videos(args.inputs, args.output)
        if success:
            print(f"Merged video saved to: {args.output}")

class VideoEditorGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Video Editor")
        self.geometry("400x300")
        
        # Cut Section
        tk.Button(self, text="Cut Video", command=self.cut_video).pack(pady=10)
        
        # Merge Section
        tk.Button(self, text="Merge Videos", command=self.merge_videos).pack(pady=10)

    def cut_video(self):
        input_path = filedialog.askopenfilename(title="Select Video to Cut")
        if not input_path:
            return
        
        duration = get_video_duration(input_path)
        print(f"Video duration: {duration} seconds")
        
        # Create cut dialog (simplified)
        start = float(input("Enter start time (seconds): "))
        end = float(input("Enter end time (seconds): "))
        output_path = filedialog.asksaveasfilename(defaultextension=".mp4")
        
        if cut_video(input_path, output_path, start, end_time=end):
            print("Cut successful!")

    def merge_videos(self):
        input_paths = filedialog.askopenfilenames(title="Select Videos to Merge")
        if not input_paths:
            return
        
        output_path = filedialog.asksaveasfilename(defaultextension=".mp4")
        if merge_videos(input_paths, output_path):
            print("Merge successful!")

if __name__ == "__main__":
    # For CLI version:
    # main_cli()
    
    # For GUI version:
    if not os.path.exists('ffmpeg'):
        print("FFmpeg is required. Please install it first:")
        print("Windows: https://ffmpeg.org/download.html")
        print("macOS: brew install ffmpeg")
        print("Linux: sudo apt install ffmpeg")
    else:
        app = VideoEditorGUI()
        app.mainloop()