import os
import argparse
from dotenv import load_dotenv
import openai
import requests
from PIL import Image
from io import BytesIO

# Load environment variables
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
STABILITY_API_KEY = os.getenv("STABILITY_API_KEY")

def generate_image(
    prompt,
    engine="dalle",
    size="1024x1024",
    style="vivid",
    quality="standard",
    output_dir="outputs"
):
    """Generate image from text using specified engine"""
    os.makedirs(output_dir, exist_ok=True)
    
    if engine == "dalle":
        return generate_dalle_image(
            prompt, 
            size=size,
            style=style,
            quality=quality,
            output_dir=output_dir
        )
    elif engine == "stability":
        return generate_stability_image(
            prompt,
            size=size,
            output_dir=output_dir
        )
    else:
        raise ValueError("Unsupported engine. Choose 'dalle' or 'stability'")

def generate_dalle_image(prompt, size, style, quality, output_dir):
    """Generate image using DALL-E 3"""
    openai.api_key = OPENAI_API_KEY
    
    response = openai.images.generate(
        model="dall-e-3",
        prompt=prompt,
        size=size,
        quality=quality,
        style=style,
        n=1,
        response_format="url"
    )
    
    img_url = response.data[0].url
    return download_and_save_image(img_url, prompt, output_dir, engine="dalle")

def generate_stability_image(prompt, size, output_dir):
    """Generate image using Stability AI"""
    width, height = map(int, size.split('x'))
    
    headers = {
        "Authorization": f"Bearer {STABILITY_API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "text_prompts": [{"text": prompt}],
        "width": width,
        "height": height,
        "steps": 30
    }
    
    response = requests.post(
        "https://api.stability.ai/v1/generation/stable-diffusion-512-v2-1/text-to-image",
        headers=headers,
        json=data
    )
    
    if response.status_code == 200:
        return save_stability_image(response.content, prompt, output_dir)
    else:
        raise Exception(f"Stability API Error: {response.text}")

def download_and_save_image(url, prompt, output_dir, engine):
    """Download and save image from URL"""
    response = requests.get(url)
    img = Image.open(BytesIO(response.content))
    filename = f"{engine}_{sanitize_filename(prompt)}.png"
    output_path = os.path.join(output_dir, filename)
    img.save(output_path)
    return output_path

def save_stability_image(image_data, prompt, output_dir):
    """Save image from Stability API response"""
    img = Image.open(BytesIO(image_data))
    filename = f"stability_{sanitize_filename(prompt)}.png"
    output_path = os.path.join(output_dir, filename)
    img.save(output_path)
    return output_path

def sanitize_filename(text):
    """Clean text for safe filename"""
    return "".join(c if c.isalnum() else "_" for c in text)[:50]

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Text-to-Image Generator")
    parser.add_argument("--prompt", type=str, required=True, help="Image description")
    parser.add_argument("--engine", choices=["dalle", "stability"], default="dalle")
    parser.add_argument("--size", default="1024x1024", 
                      help="Image size (e.g., 1024x1024, 512x512)")
    parser.add_argument("--style", choices=["vivid", "natural"], default="vivid",
                      help="DALL-E style (only for DALL-E engine)")
    parser.add_argument("--quality", choices=["standard", "hd"], default="standard",
                      help="Image quality (only for DALL-E)")
    parser.add_argument("--output-dir", default="outputs", help="Output directory")
    
    args = parser.parse_args()
    
    try:
        result = generate_image(
            args.prompt,
            engine=args.engine,
            size=args.size,
            style=args.style,
            quality=args.quality,
            output_dir=args.output_dir
        )
        print(f"Image saved to: {result}")
    except Exception as e:
        print(f"Error generating image: {str(e)}")